{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2023-05-31T12:05:19.570Z",
    "end": "2023-05-31T12:05:20.072Z",
    "duration": 502,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "45138b68-e1ce-4743-9efe-af431dbe6852",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fd5ccc07-dadd-4c6e-ba15-755cc2979a7b",
          "title": "Send and Receive messages",
          "fullFile": "D:\\Newton\\Encrypt_Decrypt_Messages\\Encrypt_Decrypt_Messages\\__tests__\\test.js",
          "file": "\\__tests__\\test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Send and Receive messages\"",
              "fullTitle": "Send and Receive messages \"before all\" hook in \"Send and Receive messages\"",
              "timedOut": false,
              "duration": 304,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await mongoose.connect(testURI, {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n  });\n  console.log('connected to DB');\n  seedWithDummyData();\n  user1 = await User.create({\n    username: 'joen',\n    email: 'joendoe@example.com',\n    password: 'password1',\n  });\n  user2 = await User.create({\n    username: 'joejoe*',\n    email: 'johndoeeee@example.com',\n    password: 'password1',\n  });\n  user1 = await User.create(user1);\n  user2 = await User.create(user2);\n} catch (err) {\n  console.log(err);\n}",
              "err": {},
              "uuid": "1a69f707-5640-46c8-be32-adc78eb73451",
              "parentUUID": "fd5ccc07-dadd-4c6e-ba15-755cc2979a7b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Send and Receive messages\"",
              "fullTitle": "Send and Receive messages \"after all\" hook in \"Send and Receive messages\"",
              "timedOut": false,
              "duration": 10,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  await mongoose.connection.db.dropDatabase();\n} catch (err) {\n  console.log(err);\n}",
              "err": {},
              "uuid": "4f51227e-b25c-462b-953b-7dfb1a619df1",
              "parentUUID": "fd5ccc07-dadd-4c6e-ba15-755cc2979a7b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "send and receive message",
              "fullTitle": "Send and Receive messages send and receive message",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const payload = {\n  username: 'testuser',\n  password: 'password',\n  email: 'test@mjert.com',\n  _id: '643d2af79287922f1c47c65c',\n};\nconst token = jwt.sign(payload, JWT_SECRET);\nconsole.log(token);\nconst messageData = {\n  senderId: user1._id, // Replace with a valid sender ID\n  receiverId: user2._id, // Replace with a valid receiver ID\n  content: 'Test message',\n};\nchai\n  .request(app)\n  .post('/api/v1/users/newmessage')\n  .set('Authorization', `${token}`)\n  .send(messageData)\n  .end(async (err, res) => {\n    expect(res).to.have.status(201);\n    expect(res.body).to.have.property(\n      'message',\n      'Message sent successfully'\n    );\n    console.log(messageData);\n  });\ndone();",
              "err": {},
              "uuid": "d5fcd51c-6223-4b56-878d-afe102b08854",
              "parentUUID": "fd5ccc07-dadd-4c6e-ba15-755cc2979a7b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d5fcd51c-6223-4b56-878d-afe102b08854"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 60000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}